/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.poiu.nbca.config;

import de.poiu.nbca.ActionRegistrationService;
import de.poiu.nbca.NbcaAction;
import de.poiu.nbca.config.CustomActionsTableModel.Entry;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.Action;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbPreferences;


final class CustomActionsPanel extends javax.swing.JPanel {

  private static final Logger LOGGER= Logger.getLogger(CustomActionsPanel.class.getName());

  private static final String PREFS_PREFIX= "CustomAction-";

  private final CustomActionsOptionsPanelController controller;

  private final CustomActionsTableModel tableModel;

  CustomActionsPanel(CustomActionsOptionsPanelController controller) {
    this.controller= controller;
    this.tableModel= new CustomActionsTableModel();
    initComponents();
    addListeners();
    // TODO listen to changes in form fields and call controller.changed()
  }

  private void addListeners() {
    this.tableModel.addTableModelListener(new TableModelListener() {
      @Override
      public void tableChanged(TableModelEvent e) {
        controller.changed();
      }
    });
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    btnAdd = new javax.swing.JButton();
    btnRemove = new javax.swing.JButton();
    spCmdLines = new javax.swing.JScrollPane();
    tblCmdLines = new javax.swing.JTable();

    org.openide.awt.Mnemonics.setLocalizedText(btnAdd, org.openide.util.NbBundle.getMessage(CustomActionsPanel.class, "CustomActionsPanel.btnAdd.text")); // NOI18N
    btnAdd.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnAddActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(btnRemove, org.openide.util.NbBundle.getMessage(CustomActionsPanel.class, "CustomActionsPanel.btnRemove.text")); // NOI18N
    btnRemove.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnRemoveActionPerformed(evt);
      }
    });

    tblCmdLines.setModel(this.tableModel);
    tblCmdLines.setCellSelectionEnabled(false);
    tblCmdLines.setRowSelectionAllowed(true);
    tblCmdLines.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    spCmdLines.setViewportView(tblCmdLines);
    tblCmdLines.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    if (tblCmdLines.getColumnModel().getColumnCount() > 0) {
      tblCmdLines.getColumnModel().getColumn(0).setPreferredWidth(100);
      tblCmdLines.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(CustomActionsPanel.class, "CustomActionsPanel.tblCmdLines.columnModel.title0")); // NOI18N
      tblCmdLines.getColumnModel().getColumn(1).setPreferredWidth(500);
      tblCmdLines.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(CustomActionsPanel.class, "CustomActionsPanel.tblCmdLines.columnModel.title1")); // NOI18N
    }

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(spCmdLines, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnRemove))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(btnAdd)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnRemove)
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(spCmdLines, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
    this.tableModel.addRow();
  }//GEN-LAST:event_btnAddActionPerformed

  private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
    int selectedRow = this.tblCmdLines.getSelectedRow();
    if (selectedRow == -1) {
      LOGGER.log(Level.WARNING, "Ignoring request to remove row -1.");
    } else {
      if (!this.tableModel.isRowEmpty(selectedRow)) {
        final String msg = "Really remove entry "+this.tableModel.getValueAt(selectedRow, 0)+" - "+this.tableModel.getValueAt(selectedRow, 1)+"?";
        final NotifyDescriptor nd = new NotifyDescriptor.Confirmation(msg, NotifyDescriptor.YES_NO_OPTION);
        final Object result = DialogDisplayer.getDefault().notify(nd);
        if (NotifyDescriptor.YES_OPTION == result) {
          this.tableModel.removeRow(selectedRow);
        }
      } else {
        // empty rows are removed without confirmation
        this.tableModel.removeRow(selectedRow);
      }
    }
  }//GEN-LAST:event_btnRemoveActionPerformed


  void load() {
    try {
      // TODO read settings and initialize GUI
      // Example:
      // someCheckBox.setSelected(Preferences.userNodeForPackage(CustomActionsPanel.class).getBoolean("someFlag", false));
      // or for org.openide.util with API spec. version >= 7.4:
      // someCheckBox.setSelected(NbPreferences.forModule(CustomActionsPanel.class).getBoolean("someFlag", false));
      // or:
      // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
      this.tableModel.clear();

      final List<Action> actions= new ActionRegistrationService().findActions("Tools");
      for (final Action action : actions) {
        final NbcaAction nbcaAction= (NbcaAction) action;
        final Entry entry= new Entry();
        entry.title= nbcaAction.getTitle();
        entry.cmdLine= nbcaAction.getCmdLine();
        this.tableModel.add(entry);
      }
//      for (final String prefKey : NbPreferences.forModule(CustomActionsPanel.class).keys()) {
//        if (prefKey.startsWith(PREFS_PREFIX)) {
//          final String title= prefKey.substring(PREFS_PREFIX.length());
//          final String cmdLine= NbPreferences.forModule(CustomActionsPanel.class).get(prefKey, "");
//          final Entry entry= new Entry();
//          entry.title= title;
//          entry.cmdLine= cmdLine;
//          this.tableModel.add(entry);
//        }
//      }
    } catch (IOException ex) {
      Exceptions.printStackTrace(ex);
    }
  }


  void store() {
    // TODO store modified settings
    // Example:
    // Preferences.userNodeForPackage(CustomActionsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
    // or for org.openide.util with API spec. version >= 7.4:
    // NbPreferences.forModule(CustomActionsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
    // or:
    // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());

    // TODO: Cleanup actions
    try {
      for (final String prefKey : NbPreferences.forModule(CustomActionsPanel.class).keys()) {
        if (prefKey.startsWith(PREFS_PREFIX)) {
          NbPreferences.forModule(CustomActionsPanel.class).remove(prefKey);
        }
      }
    } catch (BackingStoreException ex) {
      Exceptions.printStackTrace(ex);
    }

    for (int row=0; row < this.tableModel.getRowCount(); row++) {
      final String title= this.tableModel.getValueAt(row, 0).trim();
      final String cmdLine= this.tableModel.getValueAt(row, 1).trim();

      if (!title.isEmpty() && !cmdLine.isEmpty()) {
        NbPreferences.forModule(CustomActionsPanel.class).put(PREFS_PREFIX + title, cmdLine);

        try {
          final NbcaAction action= new NbcaAction(title, cmdLine);
          new ActionRegistrationService().registerAction(title, "Tools", null, null, action);
        } catch (IOException ex) {
          Exceptions.printStackTrace(ex);
        }
      }
    }
  }


  boolean valid() {
    for (int row= 0; row < this.tableModel.getRowCount(); row++) {
      final String title= this.tableModel.getValueAt(row, 0).trim();
      final String cmdLine= this.tableModel.getValueAt(row, 1).trim();

      if (title.isEmpty() && cmdLine.isEmpty()) {
        // ingore totally empty entries (will be removed later)
      } else if (title.isEmpty()) {
        //TODO: Mark error in table?
        return false;
      } else if (cmdLine.isEmpty()) {
        //TODO: Mark error in table?
        return false;
      }
    }

    return true;
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnAdd;
  private javax.swing.JButton btnRemove;
  private javax.swing.JScrollPane spCmdLines;
  private javax.swing.JTable tblCmdLines;
  // End of variables declaration//GEN-END:variables

}
